
Token-pasting operator (##)
=============================
Allows tokens used as actual arguments to be concatenated to form other tokens. It is often useful to merge
two tokens into one while expanding macros. This is called token pasting or token concatenation. The ‘##’ 
pre-processing operator performs token pasting. When a macro is expanded, the two tokens on either side of 
each ‘##’ operator are combined into a single token, which then replaces the ‘##’ and the two original tokens
in the macro expansion.

Application: 
The ## provides a way to concatenate actual arguments during macro expansion. If a parameter in the
replacement text is adjacent to a ##, the parameter is replaced by the actual argument, the ## and surrounding white
space are removed, and the result is re-scanned.

Example 1: -
----------------
#include <stdio.h>
#define concat(a, b) a##b
int main(void)
{
    int xy = 30;
    printf("%d", concat(x, y));
    return 0;
}

Output: - 
30

Example 2: -
----------------
#include <stdio.h>
#define concat(a, b) a## b
int main(void)
{
    int xy = 30;
    printf("%d", concat(x, y));
    return 0;
}

Output: - 
30

Example 3: -
-------------
#include <stdio.h>
#define concat(a, b) a ## b
int main(void)
{
    int pin_val = 1;
    int pin_number = 116;
    
    printf("%d\n", concat(pin_, val));
    printf("%d", concat(pin_, number));
    return 0;
}

Output: -
1
116
